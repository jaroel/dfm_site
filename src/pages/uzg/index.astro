---
import { Recording, getFtpListing } from "../../uzg";
import DfmLayout from "../../layouts/DfmLayout.astro";
import { UitzendingGemist } from "../../components/uzg-listing";
import { UitzendingGemistPlayer } from "../../components/uzg-player";

function getWeekNumber(d: Date) {
  // Copy date so don't modify original
  d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
  // Set to nearest Thursday: current date + 4 - current day number
  // Make Sunday's day number 7
  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
  // Get first day of year
  var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  // Calculate full weeks to nearest Thursday
  return Math.ceil(
    ((d.getFullYear() - yearStart.getFullYear()) / 86400000 + 1) / 7
  );
}

const monthNamesUC = [
  "Januari",
  "Februari",
  "Maart",
  "April",
  "Mei",
  "Juni",
  "Juli",
  "Augustus",
  "September",
  "Oktober",
  "November",
  "December",
];
const monthNamesLC = monthNamesUC.map((month) => month.toLowerCase());

const weekdayDisplayUC = [
  "Zondag",
  "Maandag",
  "Dinsdag",
  "Woensdag",
  "Donderdag",
  "Vrijdag",
  "Zaterdag",
];
const weekdayDisplayLC = weekdayDisplayUC.map((day) => day.toLowerCase());

const nameToDate = /(\d\d)-(\d\d)-(\d\d\d\d)-(\d\d)-(\d\d).mp3/;

const ftpListing = await getFtpListing();

const listing = ftpListing
  .map((value) => {
    const parsedName = nameToDate
      .exec(value.name)
      ?.slice(1, 6)
      .map((value) => parseInt(value));

    if (!parsedName) return;

    return {
      filename: value.name,
      day: parsedName[0] as number,
      month: parsedName[1] as number,
      monthIndex: (parsedName[1] as number) - 1,
      year: parsedName[2] as number,
      hour: parsedName[3] as number,
      minute: parsedName[4] as number,
    };
  })
  .filter(Boolean);

const recordings: Recording[] = listing
  .map((value) => {
    const date = new Date(
      value.year,
      value.monthIndex,
      value.day,
      value.hour,
      value.minute
    );
    const weekday = date.getDay();
    let recording = {
      ...value,
      title: "",
      date: date,
      monthDisplayUC: monthNamesUC[value.monthIndex] ?? "",
      monthDisplayLC: monthNamesLC[value.monthIndex] ?? "",
      weekday: weekday,
      weekdayDisplayUC: weekdayDisplayUC[weekday] ?? "",
      weekdayDisplayLC: weekdayDisplayLC[weekday] ?? "",
      url: `/uzg/${value.filename}`,
      weekNumber: getWeekNumber(date),
    };
    recording.title = `Uitzending Dinxper FM van ${recording.weekdayDisplayLC} ${recording.day} ${recording.monthDisplayLC} ${recording.year}`;
    return recording;
  })
  .sort((a, b) => ((a.date || 0) >= (b.date || 0) ? -1 : 1));
---

<DfmLayout>
  <div class="bg-gray-100 text-black p-9">
    <div class="max-w-7xl py-16 px-6 text-center">
      <h1 class="text-4xl font-bold text-gray-600 sm:text-5xl lg:text-6xl">
        Uitzending gemist
      </h1>
      <p class="mx-auto mt-5 max-w-5xl text-xl text-gray-500">
        Dit zijn opnames van uitzendingen op de Dinxper FM stream. Gebruik de
        speler om de uitzending terug te luisteren of klik de link om de
        uitzending op te slaan.
      </p>
    </div>
    <UitzendingGemistPlayer client:only />
    <UitzendingGemist client:visible recordings={recordings} />
  </div>
</DfmLayout>
